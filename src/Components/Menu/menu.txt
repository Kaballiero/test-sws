// src/components/Menu/MenuHeader.tsx
import React from 'react';
import {
  ListItem,
  ListItemButton,
  ListItemText,
  Typography,
  IconButton,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';

interface MenuHeaderProps {
  isOpen: boolean;
  isListOpen: boolean; // Добавляем состояние списка для отображения стрелки
  activeItem: string; // Выбранный пункт для отображения справа
  onToggleList: () => void;
}

const HEADER_ITEM = { label: 'Название проекта Аббревиатура проекта' };

const MenuHeader: React.FC<MenuHeaderProps> = ({
  isOpen,
  isListOpen,
  activeItem,
  onToggleList,
}) => {
  return (
    <ListItem disablePadding  sx={{
      position: 'relative',}}>
      <ListItemButton
        onClick={onToggleList}
        sx={{
          minHeight: 48,
          justifyContent: isOpen ? 'space-between' : 'center',
          px: 2.5,
          backgroundColor: '#1e1e1e',
          display: 'flex',
          alignItems: 'center',
        }}
      >
        {/* Заголовок слева */}
        <ListItemText
          primary={
            <Typography
              variant="body1"
              sx={{
                fontWeight: 600,
                color: '$colorWhitePrimary',
                whiteSpace: 'nowrap',
              }}
            >
              {HEADER_ITEM.label}
            </Typography>
          }
          sx={{ opacity: 1, margin: 0, flex: '0 0 auto' }}
        />

        {/* Выбранный пункт справа и стрелка */}
        {isOpen && (
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <Typography
              variant="body1"
              sx={{
                fontWeight: 400,
                color: '#ccc',
                marginRight: 1,
                whiteSpace: 'nowrap',
              }}
            >
              {activeItem}
            </Typography>
            {isListOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}
          </div>
        )}
      </ListItemButton>
    </ListItem>
  );
};
// src/components/Menu/MenuList.tsx
import {
  List,
  ListItemIcon,
  Collapse,
} from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import GridViewIcon from '@mui/icons-material/GridView';
import './menu.style.scss';

interface MenuItem {
  label: string;
}

interface MenuListProps {
  isOpen: boolean;
  isListOpen: boolean;
  onToggleSidebar: () => void;
  activeItem: string;
  onItemClick: (label: string) => void;
}

const MENU_ITEMS: MenuItem[] = [
  { label: 'По проекту' },
  { label: 'Объекты' },
  { label: 'РА' },
  { label: 'МТО' },
  { label: 'СМР' },
  { label: 'Графики' },
  { label: 'Мим' },
  { label: 'Рабочие' },
  { label: 'Ключевые' },
  { label: 'Бюджет' },
  { label: 'Финпоказатели' },
  { label: 'Платежи' },
  { label: 'Камеры' },
  { label: 'Португаль' },
  { label: 'Контракты' },
  { label: 'Контрагенты' },
];

const MenuList: React.FC<MenuListProps> = ({
  isOpen,
  isListOpen,
  onToggleSidebar,
  activeItem,
  onItemClick,
}) => {
  return (
    <Collapse in={isListOpen} timeout="auto" unmountOnExit>
      <List>
        {MENU_ITEMS.map((item, index) => (
          <ListItem key={item.label} disablePadding>
            <ListItemButton
              onClick={() => onItemClick(item.label)}
              sx={{
                minHeight: 48,
                justifyContent: isOpen ? 'initial' : 'center',
                px: 2.5,
                backgroundColor: activeItem === item.label ? '#424242' : 'transparent',
                display: isOpen ? 'flex' : 'none',
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  mr: isOpen ? 3 : 'auto',
                  justifyContent: 'center',
                  color: '$colorWhitePrimary',
                }}
              >
                {index === 0 ? (
                  <IconButton
                    color="inherit"
                    aria-label="toggle menu"
                    onClick={onToggleSidebar}
                    edge="start"
                    sx={{
                      ...(isOpen && { display: 'none' }),
                    }}
                  >
                    <MenuIcon />
                  </IconButton>
                ) : (
                  <GridViewIcon />
                )}
              </ListItemIcon>
              {isOpen && (
                <ListItemText
                  primary={
                    <Typography
                      variant="body1"
                      sx={{
                        fontWeight: 400,
                        color: '#ccc',
                      }}
                    >
                      {item.label}
                    </Typography>
                  }
                  sx={{ opacity: isOpen ? 1 : 0 }}
                />
              )}
            </ListItemButton>
          </ListItem>
        ))}
      </List>
    </Collapse>
  );
};

// src/components/Menu/Menu.tsx
import { useState } from 'react';
import { Drawer } from '@mui/material';
import './menu.style.scss';

const Menu: React.FC = () => {
  const [isOpen, setIsOpen] = useState(true);
  const [isListOpen, setIsListOpen] = useState(true);
  const [activeItem, setActiveItem] = useState('Стрингельно-монтажные работы'); // Начальное значение

  const handleToggleSidebar = () => {
    setIsOpen(!isOpen);
  };

  const handleToggleList = () => {
    setIsListOpen(!isListOpen);
  };

  const handleItemClick = (label: string) => {
    setActiveItem(label); // Обновляем выбранный пункт
  };

  return (
    <Drawer

      variant="permanent"
      open={isOpen}
      sx={{
        '& .MuiDrawer-paper': {
          
        position: 'relative',
          width: isOpen ? 240 : 56,
          boxSizing: 'border-box',
          backgroundColor: '#212121',
          color: '$colorWhitePrimary',
          transition: 'width 0.3s',
          overflowX: 'hidden',
        },
      }}
    >
      <MenuHeader
        isOpen={isOpen}
        isListOpen={isListOpen}
        activeItem={activeItem}
        onToggleList={handleToggleList}
      />
      <MenuList
        isOpen={isOpen}
        isListOpen={isListOpen}
        onToggleSidebar={handleToggleSidebar}
        activeItem={activeItem}
        onItemClick={handleItemClick}
      />
    </Drawer>
  );
};

export default Menu;